lines(density(x,bw=1), col='red', lwd=3)
N <- 10000
x <- rnbinom(N, 1, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
lines(density(x,bw=1), col='red', lwd=3)
x <- rnbinom(N, 100, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
N <- 10000
x <- rnbinom(N, 20, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
lines(density(x,bw=1), col='red', lwd=3)
N <- 10000
x <- rnbinom(N, 10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
lines(density(x,bw=1), col='red', lwd=3)
N <- 10000
x <- rnbinom(N, 10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F)
lines(density(x,bw=1), col='red', lwd=3)
N <- 10000
x <- rnbinom(N, 10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=T)
lines(density(x,bw=1), col='red', lwd=3)
N <- 10000
x <- rnbinom(N, 10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab='X', ylab=' ', axes=F)
lines(density(x,bw=1), col='red', lwd=3)
N <- 10000
x <- rnbinom(N, 10, .8)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab='X', ylab=' ', axes=F)
lines(density(x,bw=1), col='red', lwd=3)
N <- 10000
x <- rnbinom(N, 10, .6)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab='X', ylab=' ', axes=F)
lines(density(x,bw=1), col='red', lwd=3)
y=0+0.5x
y=0+0.5x
y=[1:100]
x=[1:100]
y=0+0.5x
y=[1:100]
x=[1:100]
y=0.5x
y=range(1:100)
y
x=seq(1, 100, 1)
x=seq(1, 100, 1)
y=0.5x
x=seq(1, 100, 1)
y=seq(1, 100, 1)
y=0.5x
x=seq(1, 100, 1)
y=0.5x
x=seq(1, 100, 1)
x1=0.5x
x
y=seq(1, 100, 1)
plot(x,y)
plot(x)
plot(x, line)
t=0.1
I=100
c=(t*I)/I
c
t=0.1
I=2000
c=(t*I)/I
c
t=0.1
I=2000
c=Iˆt/I
c
t=0.1
I=2000
c=I^t/I
c
I=20008
t=0.1
I=20008
c=I^t/I
c
t=0.1
I=520008
c=I^t/I
c
x=[100 120 160 180 190 200 210 220 240 250 260 280 300 320 340 350 380 400 450 500 560 630 720 870 990 1100 1400 1900 2400 3100 3900 4700 5000 ]
x=(100, 120,160, 180, 190, 200, 210, 220, 240, 250, 260, 280, 300, 320, 340, 350, 380, 400, 450, 500, 560, 630, 720, 870, 990, 1100, 1400, 1900, 2400, 3100, 3900, 4700, 5000, 8000, 10000 )
x (100, 120,160, 180, 190, 200, 210, 220, 240, 250, 260, 280, 300, 320, 340, 350, 380, 400, 450, 500, 560, 630, 720, 870, 990, 1100, 1400, 1900, 2400, 3100, 3900, 4700, 5000, 8000, 10000 )
(2^5000)*5000
(2^3000)
l=10
k=20
a=5
b=0.3
c=1-b
a*l*kˆ(b)
> a*l*kˆb
a*l*k^b
kk=1
a*l*kk^b
kkk=0.1
a*l*kkk^b
a*l*b*k^(b-1)
> a*l*b*kk^(b-1)
a*l*b*(kk)^(b-1)
> a*l*b*(kkk)^(b-1)
a*l*b*(kk)^(b-1)
a*l*b*(kkk)^(b-1)
kkkk=0.0001
kkkk=0.0001
a*l*b*(kkkk)^(b-1)
a=2
l=10
k=20
b=0.3
k=200
kk=20000
kkk=300000000
K=20
a*l*b*(K)^(b-1)
a*l*b*(kk)^(b-1)
a*l*b*(kkk)^(b-1)
A= (1+ \alpha )
=A+B
A= (1+ aP )
B = s
A = as.matrix(data.frame(c(-1,-1),c(1,1)))
A
e <- eigen(A)
e$values
a=0.5
H=10
b = -(1+(a*H))/2
c=(4)^(0.5)
c=((1+(a*H))^2 - 4*(a*H)*(1-a))^(0.5)
a=0.5
H=10
b = -(1+(a*H))/2
c=((1+(a*H))^2 - 4*(a*H)*(1-a))^(0.5)\
a1 = 0.9
H1= 200
b1 = -(1+(a1*H))/2
c1=((1+(a1*H1))^2 - 4*(a1*H1)*(1-a1))^(0.5)
a2 = 0.1
H2 = 2
b2 = -(1+(a2*H2))/2
c2=((1+(a2*H2))^2 - 4*(a2*H2)*(1-a2))^(0.5)
a=0.5
H=10
b = -(1+(a*H))/2
c=[((1+(a*H))^2 - 4*(a*H)*(1-a))^(0.5)]/2
a1 = 0.9
H1= 200
b1 = -(1+(a1*H))/2
c1=[((1+(a1*H1))^2 - 4*(a1*H1)*(1-a1))^(0.5)]/2
a2 = 0.1
H2 = 2
b2 = -(1+(a2*H2))/2
c2=[((1+(a2*H2))^2 - 4*(a2*H2)*(1-a2))^(0.5)]/2
c2=(((1+(a2*H2))^2 - 4*(a2*H2)*(1-a2))^(0.5))/2
a=0.5
H=10
b = -(1+(a*H))/2
c=(((1+(a*H))^2 - 4*(a*H)*(1-a))^(0.5))/2
a1 = 0.9
H1= 200
b1 = -(1+(a1*H))/2
c1=(((1+(a1*H1))^2 - 4*(a1*H1)*(1-a1))^(0.5))/2
a2 = 0.1
H2 = 2
b2 = -(1+(a2*H2))/2
c2=(((1+(a2*H2))^2 - 4*(a2*H2)*(1-a2))^(0.5))/2
F=b+c
G=b-c
F1=b1+c1
G1=b1-c1
F2=b2+c2
G2=b2-c2
a2 = 0.5
H2 = 2
b2 = -(1+(a2*H2))/2
c2=(((1+(a2*H2))^2 - 4*(a2*H2)*(1-a2))^(0.5))/2
F2=b2+c2
G2=b2-c2
a1 = 0.9
H1= 20
b1 = -(1+(a1*H))/2
c1=(((1+(a1*H1))^2 - 4*(a1*H1)*(1-a1))^(0.5))/2
F1=b1+c1
G1=b1-c1
a1 = 0.9
H1= 20
b1 = -(1+(a1*H1))/2
c1=(((1+(a1*H1))^2 - 4*(a1*H1)*(1-a1))^(0.5))/2
F1=b1+c1
G1=b1-c1
library(splines)
N = 100;
x = runif(100, 0,1);  # random design
f = ((exp(1.2*x)+1.5*sin(7*x))-1)/3; #true regression function in this simulation
e =  rnorm(N, 0, 0.15);
y = f+e;                     # observations
plot(x, f, col="blue");
lines(x, y, type="p", col="red");
polyfit2 = lm(y ~ poly(x, 2)); # quadratic
summary(polyfit2)
polyfit3 = lm(y ~ poly(x, 3)); # cubic
summary(polyfit3)
plot(x, y);
lines(sort(x), polyfit3$fit[order(x)], col = 2, lwd = 3);
knots = c(0.2, 0.4, 0.6, 0.8 );
matplot(x, bs(x, knots = knots, degree = 1), type = "p", main = "spline basis");
splinefit_l = lm(y ~bs(x, knots = knots, degree = 1));
plot(x, y);
lines(sort(x), splinefit_l$fit[order(x)], col = 2, lwd = 1);
matplot(x, bs(x, 6, degree = 3), type = "p", main = "spline basis"); # cubic p spline
matplot(x, bs(x, 6, degree = 1), type = "p", main = "spline basis"); # linear
splinefit0 = lm(y ~bs(x, 3));
summary(splinefit0);
summary(polyfit3);
splinefit2 = lm(y ~ bs(x, 5)); summary(splinefit2); # K = 2
splinefit5 = lm(y ~ bs(x, 8)); summary(splinefit5); # K = 5
splinefit10 = lm(y ~ bs(x, 13)); summary(splinefit10); # K = 10
splinefit20 = lm(y ~ bs(x, 23)); summary(splinefit20); # K = 20
extractAIC(splinefit2, k= log(N)); extractAIC(splinefit5, k=log(N));
extractAIC(splinefit10, k= log(N)); extractAIC(splinefit20, k= log(N));
extractAIC(polyfit3, k= log(N));
extractAIC(splinefit2); extractAIC(splinefit5);
extractAIC(splinefit10); extractAIC(splinefit20); extractAIC(polyfit3);
plot(x, y);
lines(sort(x), polyfit3$fit[order(x)], col = 2, lwd = 3);
lines(sort(x), splinefit2$fit[order(x)], col = 3, lwd = 3);
lines(sort(x), splinefit5$fit[order(x)], col = 4, lwd = 3);
lines(sort(x), splinefit10$fit[order(x)], col = 5, lwd = 3);
lines(sort(x), splinefit20$fit[order(x)], col = 6, lwd = 3);
legend(0.5,1.5, c("P3", "K=2", "K=5", "K=10", "K=20"), lty=1, col = 2:6 )
plot(x,hatvalues(splinefit10), type="p");
plot(x,hatvalues(splinefit2), type="p");
#install.packages("splines") # if so then use package splines
library(splines)
#################################################################
# Simulated example
N = 100;
x = runif(100, 0,1);  # random design
f = ((exp(1.2*x)+1.5*sin(7*x))-1)/3; #true regression function in this simulation
e =  rnorm(N, 0, 0.15);
y = f+e;                     # observations
plot(x, f, col="blue");
lines(x, y, type="p", col="red");
polyfit2 = lm(y ~ poly(x, 2)); # quadratic
summary(polyfit2)
polyfit3 = lm(y ~ poly(x, 3)); # cubic
summary(polyfit3)
plot(x, y);
lines(sort(x), polyfit3$fit[order(x)], col = 2, lwd = 3);
knots = c(0.2, 0.4, 0.6, 0.8 );
matplot(x, bs(x, knots = knots, degree = 1), type = "p", main = "spline basis");
splinefit_l = lm(y ~bs(x, knots = knots, degree = 1));
plot(x, y);
lines(sort(x), splinefit_l$fit[order(x)], col = 2, lwd = 1);
matplot(x, bs(x, 6, degree = 3), type = "p", main = "spline basis"); # cubic p spline
matplot(x, bs(x, 6, degree = 1), type = "p", main = "spline basis"); # linear
matplot(x, bs(x, 6, degree = 2), type = "p", main = "spline basis"); # linear
splinefit0 = lm(y ~bs(x, 3));
summary(splinefit0);
summary(polyfit3);
summary(polyfit3);
splinefit2 = lm(y ~ bs(x, 5)); summary(splinefit2); # K = 2
splinefit5 = lm(y ~ bs(x, 8)); summary(splinefit5); # K = 5
splinefit10 = lm(y ~ bs(x, 13)); summary(splinefit10); # K = 10
splinefit20 = lm(y ~ bs(x, 23)); summary(splinefit20); # K = 20
extractAIC(splinefit2, k= log(N)); extractAIC(splinefit5, k=log(N));
extractAIC(splinefit10, k= log(N)); extractAIC(splinefit20, k= log(N));
extractAIC(polyfit3, k= log(N));
# AIC
extractAIC(splinefit2); extractAIC(splinefit5);
extractAIC(splinefit10); extractAIC(splinefit20); extractAIC(polyfit3);
windows();
plot(x, y);
lines(sort(x), polyfit3$fit[order(x)], col = 2, lwd = 3);
lines(sort(x), splinefit2$fit[order(x)], col = 3, lwd = 3);
lines(sort(x), splinefit5$fit[order(x)], col = 4, lwd = 3);
lines(sort(x), splinefit10$fit[order(x)], col = 5, lwd = 3);
lines(sort(x), splinefit20$fit[order(x)], col = 6, lwd = 3);
plot(x,hatvalues(splinefit10), type="p");
plot(x,hatvalues(splinefit2), type="p");
plot(x,hatvalues(splinefit2), type="p");
lsplinefit5 = lm(y ~ bs(x, 5+1, degree = 1 )); summary(lsplinefit5); # K = 5
windows()
plot(x, y);
lines(sort(x), splinefit5$fit[order(x)], col = 2, lwd = 3);
lines(sort(x), lsplinefit5$fit[order(x)], col = 3, lwd = 3);
legend(0.5,1.5, c("cubic", "linear"), lty=1, col = 2:6 )
plot(x, y);
lines(sort(x), f[order(x)]  , col = 2, lwd = 3);
lines(sort(x),  splinefit5$fit[order(x)], col = 3, lwd = 3);
legend(0.5,0.5, c("true", "cubic"), lty=1, col = 2:6 );
linearfit = lm(y ~ ns(x, 1)); summary(linearfit); # K = 0
splinefit2 = lm(y ~ ns(x, 3)); summary(splinefit2); # K = 2
splinefit5 = lm(y ~ ns(x, 6)); summary(splinefit5); # K = 5
splinefit10 = lm(y ~ ns(x, 11)); summary(splinefit10); # K = 10
splinefit20 = lm(y ~ ns(x, 21)); summary(splinefit20); # K = 20
# BIC
extractAIC(splinefit2, k= log(N)); extractAIC(splinefit5, k=log(N));
extractAIC(splinefit10, k= log(N)); extractAIC(splinefit20, k= log(N));
extractAIC(polyfit3, k= log(N));
# AIC
extractAIC(splinefit2); extractAIC(splinefit5);
extractAIC(splinefit10); extractAIC(splinefit20); extractAIC(polyfit3);
plot(x, y);
lines(sort(x), linearfit$fit[order(x)], col = 2, lwd = 3);
lines(sort(x), splinefit2$fit[order(x)], col = 3, lwd = 3);
lines(sort(x), splinefit5$fit[order(x)], col = 4, lwd = 3);
lines(sort(x), splinefit10$fit[order(x)], col = 5, lwd = 3);
lines(sort(x), splinefit20$fit[order(x)], col = 6, lwd = 3);
legend(0.5,0.5, c("Linear fit", "K=2", "K=5", "K=10", "K=20"), lty=1, col = 2:6 )
maxK = 25;
vBIC = rep(0, maxK); vAIC = rep(0, maxK);
for (i in 1:maxK)
{
splft = lm(y ~ ns(x, i ));
vBIC[i] = extractAIC(splft, k= log(N))[2];
vAIC[i] = extractAIC(splft)[2];
}
plot(1:maxK,  vAIC )
library(splines)
N = 100;
x = runif(100, 0,1);  # random design
f = ((exp(1.2*x)+1.5*sin(7*x))-1)/3; #true regression function in this simulation
e =  rnorm(N, 0, 0.15);
y = f+e;                     # observations
plot(x, f, col="blue");
lines(x, y, type="p", col="red");
polyfit2 = lm(y ~ poly(x, 2)); # quadratic
summary(polyfit2)
polyfit3 = lm(y ~ poly(x, 3)); # cubic
summary(polyfit3)
plot(x, y);
lines(sort(x), polyfit3$fit[order(x)], col = 2, lwd = 3);
knots = c(0.2,0.22, 0.4,0.5, 0.6, 0.8 );
matplot(x, bs(x, knots = knots, degree = 1), type = "p", main = "spline basis");
splinefit_l = lm(y ~bs(x, knots = knots, degree = 1));
plot(x, y);
lines(sort(x), splinefit_l$fit[order(x)], col = 2, lwd = 1);
knots = c(0.2,0.22, 0.4,0.5, 0.6, 0.8,0.85,0.9 );
# plot of B-spline basis
matplot(x, bs(x, knots = knots, degree = 1), type = "p", main = "spline basis");
splinefit_l = lm(y ~bs(x, knots = knots, degree = 1));
plot(x, y);
lines(sort(x), splinefit_l$fit[order(x)], col = 2, lwd = 1);
knots = c(0.2,0.22, 0.4,0.5, 0.6, 0.8,0.85,0.87,0.88,0.9 );
matplot(x, bs(x, knots = knots, degree = 1), type = "p", main = "spline basis");
splinefit_l = lm(y ~bs(x, knots = knots, degree = 1));
plot(x, y);
lines(sort(x), splinefit_l$fit[order(x)], col = 2, lwd = 1);
knots = c(0.2, 0.4, 0.6, 0.8);
# plot of B-spline basis
matplot(x, bs(x, knots = knots, degree = 1), type = "p", main = "spline basis");
splinefit_l = lm(y ~bs(x, knots = knots, degree = 1));
plot(x, y);
lines(sort(x), splinefit_l$fit[order(x)], col = 2, lwd = 1);
# plot of B-spline basis
matplot(x, bs(x, knots = knots, degree = 1), type = "p", main = "spline basis");
splinefit_l = lm(y ~bs(x, knots = knots, degree = 2));
plot(x, y);
lines(sort(x), splinefit_l$fit[order(x)], col = 2, lwd = 1);
# plot of B-spline basis
matplot(x, bs(x, knots = knots, degree = 1), type = "p", main = "spline basis");
splinefit_l = lm(y ~bs(x, knots = knots, degree = 3));
plot(x, y);
lines(sort(x), splinefit_l$fit[order(x)], col = 2, lwd = 1);
splinefit0 = lm(y ~bs(x, 3));
summary(splinefit0);
splinefit0 = lm(y ~bs(x, 3));
plot(x, y);
lines(sort(x), splinefit0$fit[order(x)], col = 2, lwd = 1);
bs()
lm
bs
1L + 3
# Smoothing Cubic splines
# Simulated example
N = 100;
x = runif(100, 0,1);  # random design
x = seq(0, 1, length.out = N);  # equally spaced points
f = sin(12*x+0.2)/(x+0.2); #true regression function
e =  rnorm(N, 0, 1);
y = f+e;                     # observations
plot(x, y, type = "p", col="red");
lines(x, f, type="l", col="blue", lwd = 3);
legend(0.25,3.5 , c("y", "f(x)"), lty=1, col = c("red", "blue"), cex = 0.9)
ssplinefit.cv = smooth.spline(x, y, cv = T)
ssplinefit.cv
ssplinefit.cv
names(ssplinefit.cv)
ssplinefit2 = smooth.spline(x, y, df = 2) # df is set equal to 2
ssplinefit20 = smooth.spline(x, y, df = 20) # df is set equal to 20
ssplinefit50 = smooth.spline(x, y, df = 50) # df is set equal to 50
plot(x, y);
lines(ssplinefit.cv, col = 2, lwd = 3);
lines(ssplinefit2, col = 3, lwd = 2);
lines(ssplinefit20, col = 4, lwd = 2);
lines(ssplinefit50, col = 5, lwd = 2);
legend(0.3,3, c("CV", "df=2", "df=20", "df=50"), lty=1, col = 2:6 )
N = 100;
x = runif(100, 0,1);  # random design
x = seq(0, 1, length.out = N);  # equally spaced points
f = sin(12*x+0.2)/(x+0.2); #true regression function
e =  rnorm(N, 0, 1);
y = f+e;                     # observations
plot(x, y, type = "p", col="red");
lines(x, f, type="l", col="blue", lwd = 3);
legend(0.25,3.5 , c("y", "f(x)"), lty=1, col = c("red", "blue"), cex = 0.9)
ssplinefit.cv = smooth.spline(x, y, cv = T)
ssplinefit.cv
names(ssplinefit.cv)
ssplinefit2 = smooth.spline(x, y, df = 2) # df is set equal to 2
ssplinefit20 = smooth.spline(x, y, df = 20) # df is set equal to 20
ssplinefit50 = smooth.spline(x, y, df = 50) # df is set equal to 50
plot(x, y);
lines(ssplinefit.cv, col = 2, lwd = 3);
lines(ssplinefit2, col = 3, lwd = 2);
lines(ssplinefit20, col = 4, lwd = 2);
lines(ssplinefit50, col = 5, lwd = 2);
legend(0.3,3, c("CV", "df=2", "df=20", "df=50"), lty=1, col = 2:6 )
ssplinefit2 = smooth.spline(x, y, df = 2) # df is set equal to 2
ssplinefit20 = smooth.spline(x, y, df = 20) # df is set equal to 20
ssplinefit50 = smooth.spline(x, y, df = 9) # df is set equal to 50
plot(x, y);
lines(ssplinefit.cv, col = 2, lwd = 3);
lines(ssplinefit2, col = 3, lwd = 2);
lines(ssplinefit20, col = 4, lwd = 2);
lines(ssplinefit50, col = 5, lwd = 2);
legend(0.3,3, c("CV", "df=2", "df=20", "df=9"), lty=1, col = 2:6 )
library(foreign)
clothing = read.dta("clothing.dta" );
attach(clothing);
x = log(hoursw);
y = log(tsales)
setwd("~/OneDrive/Documentos/UNIVERSITY/TOR VERGATA/TAs/M - Business Statistic/lab5")
library(foreign)
clothing = read.dta("clothing.dta" );
attach(clothing);
x = log(hoursw);
y = log(tsales)
plot( log(hoursw), log(tsales) ,
pch=1, cex = 0.6, # plotting symbol and dimension
ylab="log(tsales)", xlab="log(hoursw)");
abline(lm( y ~  x ), lty=2, col=2, lwd=1)
lines(loess.smooth(x, y, span=.9), col=3, lty=1, lwd=3)
loess.span
loess.smooth
help(loess)
lines(loess.smooth(x, y, span=.5), col=4, lty=2, lwd=2)
lines(loess.smooth(x, y, span=.1), col=5, lty=3, lwd=2)
legend(5.0,12, c("span = 1", "span = 0.9", "span = 0.5", "span = 0.1"),
cex = 0.6, lty=c(2,1,2,3), col = 2:5 )
plot( log(hoursw), log(tsales) ,
pch=1, cex = 0.6, # plotting symbol and dimension
ylab="log(tsales)", xlab="log(hoursw)");
abline(lm( y ~  x ), lty=2, col=2, lwd=1)
lines(loess.smooth(x, y, span=.1), col=5, lty=3, lwd=2)
fit1 = loess(y~ x, span=.9, degree = 1)
names(fit1);
fit1$trace.hat ; # df (complexity of model)
p = 1;
lambda = seq(0.4, 0.99, 0.01);
m = length(lambda); #
N = length(x);    # sample size
maic = rep(0, m); mbic = rep(0, m); mgcv =rep(0, m);
for (i in 1:m)
{
l = lambda[i];
fit = loess(y~ x, span=l, degree = p);
df = fit$trace.hat;
s2 = (fit$s)^2;
maic[i] = log(s2) + 2*df/N;
mbic[i] = log(s2) + log(N)*df/N;
mgcv[i] = s2/((1-df/N)^2);
}
plot(lambda, mgcv);  # selected model has span = 0.9
# confidence bands
fit = predict(fit1 ,  se=TRUE)
str(fit)
plot( log(hoursw), log(tsales) ,
pch=1, cex = 0.6, # plotting symbol and dimension
ylab="log(tsales)", xlab="log(hoursw)");
lines(sort(x), fit$fit[order(x)], col = 2, lwd = 3);
lines(sort(x) , (fit$fit + 2*fit$se.fit)[order(x)], col=4, lty=2, lwd=2)
lines(sort(x) , (fit$fit - 2*fit$se.fit)[order(x)], col=4, lty=2, lwd=2)
